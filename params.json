{"name":"VizWit","tagline":"An interactive data visualization tool","body":"# VizWit\r\nAn interactive data visualization tool. VizWit uses a [JSON config file](https://gist.github.com/601224472a5d53cbb908) to generate \r\ninteractive charts that cross-filter one another. It currently supports data hosted in a Socrata Open Data portal, which includes \r\ncities such as [Philadelphia](http://opendataphilly.org), [Chicago](https://data.cityofchicago.org/), [San Francisco](https://data.sfgov.org/)\r\nand many others. However, interactions with Socrata have been [abstracted](src/scripts/collections/socrata.js) to allow\r\nfor other data providers to be written (in theory).\r\n\r\n[![screencast](http://i.imgur.com/4gTXNFK.gif)](http://vizw.it/?gist=51db593dc0537d1a3f05)\r\n\r\n# Features\r\n* Clicking on a chart cross-filters the other charts\r\n* Multiple datasets on one page\r\n* Configurable via [GUI](http://builder.vizwit.io)\r\n* Fork configurations with a gist\r\n* Pie chart\r\n* Callout metric\r\n* Scrolling bar charts\r\n* Responsive / mobile-friendly\r\n* Embeddable\r\n* Free-text search on table\r\n* 100% client-side\r\n* Open source / extendable\r\n\r\n# Examples\r\n* [Business Licenses in Chicago](http://vizw.it/?gist=a304ce8fac9c14dfbf16) ([config](https://gist.github.com/a304ce8fac9c14dfbf16))\r\n* [Philadelphia Parking Violations](http://vizw.it/?gist=601224472a5d53cbb908) ([config](https://gist.github.com/601224472a5d53cbb908))\r\n* [Philadelphia Property Assessments](http://vizw.it/?gist=cbd84c256f1efe250b8e) ([config](https://gist.github.com/cbd84c256f1efe250b8e))\r\n* [City-owned Properties in Philadelphia](http://vizw.it/?gist=b03fc4fb30e5c8265f6b) ([config](https://gist.github.com/b03fc4fb30e5c8265f6b))\r\n* [Chicago Crime Incidents](http://vizw.it/?gist=51db593dc0537d1a3f05) ([config](https://gist.github.com/51db593dc0537d1a3f05))\r\n* [Callout Cards](http://vizw.it/?gist=eec2c0f438ebc8fd67c6) ([config](https://gist.github.com/eec2c0f438ebc8fd67c6))\r\n\r\n# Configuration\r\nVizWit cards are configured via JSON objects. The layout is defined using size and order properties on those objects, generated by the\r\n[Config Builder](http://builder.vizwit.io) (WIP). The resulting JSON file is then hosted on [gist.github.com](https://gist.github.com), \r\na free and easy service to share code snippets. The Gist ID is then used in the VizWit URL (ie. `vizw.it/?gist=a304ce8fac9c14dfbf16`). \r\nThis allows viewers to fork the Gist and build their own VizWit page.\r\n\r\n[Configuration Documentation](https://github.com/timwis/vizwit/wiki/Configuration)\r\n\r\n# Build your own\r\nVisit the [builder](http://builder.vizwit.io) and add a few cards, then configure them using the wrench icon. When you're finished, click\r\n**Export** and copy the configuration code into a new \"gist\" at [gist.github.com](http://gist.github.com). Once you click **Create**,\r\nyou should see your new \"gist\" and the \"gist id\" of random characters in the URL (ie. `813483da72ac781f8b13`). Use that gist id to go to\r\n`http://vizw.it?gist=YOUR_GIST_ID`\r\n\r\nIf you'd like to share what you've created, [post an issue](https://github.com/timwis/vizwit/issues/new) with a link to it.\r\n\r\n# Technology\r\nVizWit is a client-side JavaScript application. The application is structured using Backbone. Charts are built using AmCharts. Maps are\r\nbuilt using Leaflet. Tables are built using DataTables. Tests (of which there are not nearly enough!) are run using Mocha. The interactive\r\nlayout is generated by Gridstack. The application is compiled using Browserify. See the full list of dependencies in \r\n[package.json](https://github.com/timwis/vizwit/blob/master/package.json#L21-L66)\r\n\r\n# How it works\r\n[vizwit.js](src/scripts/vizwit.js) is the primary chart-generating module. It takes a `container` selector and a `config` object and\r\nuses them to initialize a view (bar chart, map, table, etc.). The views are passed a `collection` and a `filteredCollection`, which are\r\nidentical and allow the view to query the data provider (Socrata). Views generate the chart/map/table/etc. and listen for user interactions\r\non them. On an interaction, the view triggers the global event object with the filter (ie. `state=PA`), and all views that use the same \r\ndataset receive the event and use their `filteredCollection` to query the data provider with the filter passed through the event. By\r\nusing a separate collection, VizWit can show the \"filtered value\" and the \"original value\" side-by-side.\r\n\r\nThe actual entry point is either [layout.js](src/scripts/layout.js) or [embed.js](src/scripts/embed.js). layout.js fetches a gist, reads\r\nits configuration, and creates a layout on the page. Then for each chart in the configuration, it calls `init()` from vizwit.js as \r\ndescribed above. embed.js simply finds the parent container of the `<script>` tag that was embedded, and calls `init()` from vizwit.js\r\ninside of it. This way of embedding allows the VizWit library to only be loaded once on the page with as many charts embedded in any\r\nelement ([example](http://vizw.it/embed-demo.html)).\r\n\r\n# Development\r\n* While developing, use `npm start` to automatically recompile when changes are made and run a web server at `localhost:8080`\r\n* Use `npm run lint` to verify code style\r\n* Use `npm test` to run unit tests\r\n* Use `npm run build` for a production build, and then use `npm run deploy` to push the `dist/` directory to the `gh-pages` branch\r\n\r\n# License\r\n[GPL-2](LICENSE.md) (create an issue if that doesn't work for someone)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}